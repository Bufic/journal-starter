# name: Deploy FastAPI App

# on:
#   push:
#     branches:
#       - main

# jobs:
#   deploy:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v3

#       - name: Set up Docker
#         uses: docker/setup-buildx-action@v2

#       - name: Log in to DockerHub
#         run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

#       - name: Build Docker Image
#         run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/fastapi-app:latest .

#       - name: Push Docker Image
#         run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/fastapi-app:latest

#       - name: Copy SSH Key
#         run: |
#           mkdir -p ~/.ssh
#           echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
#           chmod 600 ~/.ssh/id_rsa

#       - name: Deploy on EC2
#         env:
#           HOST: ${{ secrets.HOST }}
#           USERNAME: ${{ secrets.USERNAME }}
#           DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
#           DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
#           POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
#           POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
#           POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
#           POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
#         run: |
#           ssh -o StrictHostKeyChecking=no "$USERNAME@$HOST" << EOF
#            sudo apt update
#            sudo apt install -y docker.io

#            echo "$DOCKERHUB_TOKEN" | sudo docker login -u "$DOCKERHUB_USERNAME" --password-stdin

#            sudo docker stop fastapi-app || true
#            sudo docker rm fastapi-app || true

#            sudo docker pull "$DOCKERHUB_USERNAME/fastapi-app:latest"

#            sudo docker run -d --name fastapi-app -p 80:8000 \
#            -e POSTGRES_USER=$POSTGRES_USER \
#            -e POSTGRES_PASSWORD=$POSTGRES_PASSWORD \
#            -e POSTGRES_HOST=$POSTGRES_HOST \
#            -e POSTGRES_DB=$POSTGRES_DB \
#            -e DATABASE_URL=postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST:5432/$POSTGRES_DB \
#            $DOCKERHUB_USERNAME/fastapi-app:latest
#           EOF

# .github/workflows/deploy-to-kind.yml
name: Deploy to kind Cluster

on:
  workflow_run:
    workflows: ["Build and Push FastAPI Docker Image"]
    types:
      - completed

jobs:
  deploy:
    runs-on: self-hosted

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Replace image tag in FastAPI deployment
        run: |
          sed -i "s|image:.*|image: ${{ secrets.DOCKERHUB_USERNAME }}/fastapi-app:latest|" k8s/fastapi-deployment.yaml

      - name: Apply all Namespaces
        run: |
          kubectl apply -f namespaces/journal-app-namespace.yaml
          kubectl apply -f namespaces/monitoring-namespace.yaml

      - name: Apply all Kubernetes manifests
        run: |
          kubectl apply -f k8s/config.yaml
          kubectl apply -f k8s/secret.yaml
          kubectl apply -f k8s/postgres-secret.yaml
          kubectl apply -f k8s/postgres-deployment.yaml
          kubectl apply -f k8s/postgres-service.yaml
          kubectl apply -f k8s/fastapi-deployment.yaml
          kubectl apply -f k8s/fastapi-service.yaml

      - name: Deploy Monitoring stack (Prometheus & Grafana)
        run: |
          kubectl apply -f monitoring/prometheus/prometheus-configmap.yaml
          kubectl apply -f monitoring/prometheus/prometheus-deployment.yaml
          kubectl apply -f monitoring/prometheus/prometheus-service.yaml
          kubectl apply -f monitoring/grafana/grafana-datasource-config.yaml
          kubectl apply -f monitoring/grafana/grafana-dashboard-config.yaml
          kubectl apply -f monitoring/grafana/grafana-deployment.yaml
          kubectl apply -f monitoring/grafana/grafana-service.yaml
