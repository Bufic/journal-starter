name: Deploy FastAPI with PostgreSQL (Secure)
on:
  push:
    branches: [main]

env:
  DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/journal-app
  DB_HEALTH_TIMEOUT: 60 # Max seconds to wait for DB

jobs:
  setup-database:
    runs-on: ubuntu-latest
    outputs:
      db_ip: ${{ steps.db-ip.outputs.DB_IP }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get Database Instance IP
        id: db-ip
        run: |
          IP=$(aws ec2 describe-instances \
            --instance-ids ${{ secrets.DB_INSTANCE_ID }} \
            --query 'Reservations[0].Instances[0].PrivateIpAddress' \
            --output text)
          echo "DB_IP=${IP}" >> $GITHUB_OUTPUT

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}

      - name: Configure PostgreSQL
        run: |
          # Create SSH config file
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" > ~/.ssh/known_hosts
           
           ssh -o StrictHostKeyChecking=accept-new ubuntu@${{ secrets.EC2_PUBLIC_IP }} << 'TUNNEL'
           #!/bin/bash
           ssh -o StrictHostKeyChecking=accept-new ubuntu@${{ steps.db-ip.outputs.DB_IP }} << 'PGEOF'
           #!/bin/bash
           set -e

           # Install and configure PostgreSQL
           sudo apt-get update
           sudo apt-get install -y postgresql postgresql-contrib

           # Allow connections from FastAPI instance only
           echo "host ${{ secrets.DB_NAME }} postgres ${{ steps.db-ip.outputs.DB_IP }}/32 md5" | \
             sudo tee -a /etc/postgresql/14/main/pg_hba.conf

           sudo sed -i "s/#listen_addresses = 'localhost'/listen_addresses = '*'" \
             /etc/postgresql/14/main/postgresql.conf

           sudo systemctl restart postgresql

           # Secure database
           sudo -u postgres psql -c "
             ALTER USER postgres WITH PASSWORD '${{ secrets.DB_PASSWORD }}';
             CREATE DATABASE ${{ secrets.DB_NAME }};
             REVOKE ALL ON DATABASE ${{ secrets.DB_NAME }} FROM public;
           "
           PGEOF
           TUNNEL

  deploy-app:
    needs: setup-database
    runs-on: ubuntu-latest
    steps:
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}

      - name: Configure Docker on EC2
        run: |
          ssh -o StrictHostKeyChecking=accept-new ubuntu@${{ secrets.EC2_PUBLIC_IP }} << 'DOCKER'
          #!/bin/bash
          set -e

          # Install Docker if missing
          if ! command -v docker &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y docker.io
            sudo systemctl enable docker
            sudo usermod -aG docker ubuntu
            newgrp docker
          fi
          DOCKER

      - name: Deploy FastAPI Container
        run: |
          ssh -o StrictHostKeyChecking=accept-new ubuntu@${{ secrets.EC2_PUBLIC_IP }} << 'DEPLOY'
          #!/bin/bash
          set -e

          # Wait for DB readiness
          for i in $(seq 1 ${{ env.DB_HEALTH_TIMEOUT }}); do
            if docker run --rm postgres:13 pg_isready \
              -h ${{ needs.setup-database.outputs.db_ip }} \
              -U postgres \
              -d ${{ secrets.DB_NAME }}; then
              break
            fi
            sleep 2
          done

          # Deploy container
          docker pull ${{ env.DOCKER_IMAGE }}:latest
          docker stop journal-app || true
          docker rm journal-app || true

          docker run -d --name journal-app \
            --restart unless-stopped \
            -p 8000:8000 \
            -e DB_HOST=${{ needs.setup-database.outputs.db_ip }} \
            -e DB_PORT=5432 \
            -e DB_NAME=${{ secrets.DB_NAME }} \
            -e DB_USER=postgres \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            ${{ env.DOCKER_IMAGE }}:latest

          # Verify deployment
          sleep 10
          curl -sSf http://localhost:8000/docs
          DEPLOY

    #   - name: Run Database Migrations
    #     run: |
    #       ssh -o StrictHostKeyChecking=accept-new ubuntu@${{ secrets.EC2_PUBLIC_IP }} << 'MIGRATE'
    #       #!/bin/bash
    #       docker exec journal-app alembic upgrade head
    #       MIGRATE
